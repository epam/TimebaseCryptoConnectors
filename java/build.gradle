plugins {
    // Supports functionality similar to Maven BOM.
    // Helps to avoid re-declaring dependency version in each subproject.
    // See https://github.com/spring-gradle-plugins/dependency-management-plugin
	
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.github.spotbugs' version '5.0.13' apply false
    id 'com.github.hierynomus.license-report' version '0.15.0'

    id 'com.github.jk1.dependency-license-report' version '2.0'
    id 'com.vanniktech.dependency.graph.generator' version '0.5.0'
    id 'checkstyle'
}

ext {
    isReleaseVersion = !version.endsWith("SNAPSHOT")
}

// To enable JavaDoc generation add Gradle property to command line:
// -PincludeJavaDocs

apply plugin: 'base'
apply plugin: "com.github.hierynomus.license-report"
apply from: "$rootDir/gradle/License.gradle"

// We don't want to apply plugins and build artifacts for non-leaf (grouping) projects.
// So we create a list of leaf projects and apply all java-related plugins on them only.
def leafProjects = subprojects.findAll { subproject ->
    subproject.subprojects.empty
}

// Spotbugs
def enableSpotbugs = hasProperty("spotbugs") || Boolean.getBoolean("spotbugs") || Boolean.parseBoolean(System.getenv('SPOTBUGS'))
if (enableSpotbugs) {
    println("Spotbugs is ENABLED")
}

licenseReport {
    // prepare allowed licenses

//    for (nl.javadude.gradle.plugins.license.LicenseMetadata a in downloadLicenses.allowedLicenses) {
//        println()
//
//        def names = downloadLicenses.aliases.get(a)
//        for (name in names) {
//            if (name instanceof String)
//                println("{\"moduleLicense\": \"" + name + "\"},")
//            else if (name instanceof nl.javadude.gradle.plugins.license.LicenseMetadata)
//                println("{\"moduleLicense\": \"" + name.licenseName + "\"},")
//        }
//    }

    excludeGroups = []
    excludes = ['com.sun.codemodel:codemodel-project', 'com.fasterxml.jackson:jackson-bom']

    configurations = ['runtimeClasspath']
    allowedLicensesFile = new File("$rootDir/allowed-lic.json")
}

checkLicense {
    outputs.upToDateWhen { false }
}

configure(leafProjects) {
    apply plugin: 'java-library'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    //apply plugin: 'com.github.spotbugs' // Static Code analysis
    apply plugin: 'signing'
    //apply plugin: 'checkstyle'

    compileJava.options.encoding = 'UTF-8'
    compileJava.options.compilerArgs += '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
    compileJava.options.compilerArgs += '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    compileJava.options.compilerArgs += '--add-exports=java.desktop/sun.swing=ALL-UNNAMED'
    compileJava.options.compilerArgs += '--add-exports=java.desktop/com.sun.java.swing.plaf.windows=ALL-UNNAMED'
    compileTestJava.options.compilerArgs += '--add-exports=java.base/sun.nio.ch=ALL-UNNAMED'
    compileTestJava.options.compilerArgs += '--add-exports=jdk.compiler/com.sun.tools.javac.util=ALL-UNNAMED'
    sourceCompatibility = 11
    targetCompatibility = 11

    configurations.all {
        resolutionStrategy {
            // Disable this line on case of version conflict and then run :dependency task OR execute build with --scan option
            failOnVersionConflict()
        }

        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api' // GNU license
    }

//    configurations.implementation {
//        exclude group: 'jakarta.annotation', module: 'jakarta.annotation-api' // GNU license
//    }

//    spotbugsMain {
//        enabled = false
//        reports {
//            html.enabled = true
//        }
//        reportLevel = 'high'
//    }
//
//    spotbugsTest {
//        enabled = false
//        reports {
//            html.enabled = true
//        }
//        reportLevel = 'high'
//    }

//    spotbugs {
//        toolVersion = "4.2.3"
//        effort = "max"
//        reportLevel = "medium"
//        excludeFilter = rootProject.file('spotbugs-excludes.xml')
//    }

    task allDeps(type: DependencyReportTask) {}

    // Defines versions of dependencies to be used by subprojects
    // https://github.com/spring-gradle-plugins/dependency-management-plugin#dependency-management-dsl
    dependencyManagement {
        dependencies {

            dependency group: 'com.epam.deltix', name: 'dfp', version: dfpVersion

            dependency 'com.epam.deltix:hd-date-time:0.2.11'

            dependencySet(group: 'com.epam.deltix', version: timebaseCommonsVersion) {
                entry 'timebase-collections'
                entry 'timebase-messages'
                entry 'timebase-lang'
                entry 'timebase-util'
            }

            dependencySet(group: 'org.finos.timebase-ce', version: timebaseVersion) {
                entry 'timebase-aerondirect'
                entry 'timebase-api'
                entry 'timebase-client'
                entry 'timebase-commons'
                entry 'timebase-pub'
            }

            dependency group: 'io.github.green4j', name: 'green-jelly', version: '0.1.0'

            dependency "org.springframework:spring-core:$springVersion"

            dependency group: "org.springframework.boot", name: "spring-boot-starter-web", version:springBootVersion
            dependency group: "org.springframework.boot", name: "spring-boot-starter-actuator", version:springBootVersion

            dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.72') {
                entry 'tomcat-embed-core' // Tomcat core
                entry 'tomcat-embed-jasper' // Tomcat JSP support
                entry 'tomcat-embed-logging-juli' // Tomcat Logging
            }

            dependency 'com.google.guava:guava:32.0.0-jre'
            dependency 'com.google.code.gson:gson:2.8.9'
//            dependency 'com.google.code.findbugs:jsr305:3.0.2'
//            dependency 'com.google.code.findbugs:annotations:3.0.1'
//
            dependency 'org.slf4j:slf4j-api:1.7.25'
//            dependency 'org.codehaus.groovy:groovy:2.5.3'
//            dependency 'org.apache.ant:ant:1.9.13'

            dependency 'org.hdrhistogram:HdrHistogram:2.1.10'

            // JMH
            dependencySet(group: 'org.openjdk.jmh', version: '1.23') {
                entry 'jmh-core'
                entry 'jmh-generator-annprocess'
            }

            dependency 'com.intellij:annotations:12.0'

            // Fix for conflicting versions
            // This section enlists only dependencies that are not directly used by our code but used by our dependencies
            // and cause version conflict. Versions specified here may need to be updated when we update 3rd party dependeiceis.
            // The project should be buildable without this section but with "failOnVersionConflict" option turned off.
            
            dependency 'net.java.dev.jna:jna:5.8.0' // conflict resolution
//            dependency 'org.hamcrest:hamcrest-core:1.3'
//
            dependency 'commons-lang:commons-lang:2.6'
            dependency 'commons-logging:commons-logging:1.1.1'
            dependency 'commons-collections:commons-collections:3.2.2'
            dependency 'commons-codec:commons-codec:1.13'
            dependency 'commons-io:commons-io:2.7'

            dependency 'org.apache.commons:commons-compress:1.21'
            dependency 'org.apache.commons:commons-lang3:3.7'
            dependency 'org.apache.commons:commons-math3:3.6'
            dependency 'org.apache.commons:commons-text:1.10.0'

            dependencySet(group: 'com.fasterxml.jackson.core', version: '2.13.5') {
                entry 'jackson-core'
                entry 'jackson-databind'
                entry 'jackson-annotations'
            }

            dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.13.5'
            dependency 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.5'
            dependency 'com.fasterxml.jackson.module:jackson-module-parameter-names:2.13.5'

            dependency 'com.fasterxml.jackson:jackson-bom:2.13.5'

            dependency 'com.fasterxml.jackson.dataformat:jackson-dataformat-cbor:2.13.3'
            dependency 'javax.annotation:javax.annotation-api:1.3.2'
            dependency 'org.reflections:reflections:0.10.2'

            dependency 'org.yaml:snakeyaml:2.0'
//
//            dependencySet(group: 'com.squareup.okhttp3', version: '3.3.1') {
//                entry 'okhttp'
//            }
//
//            dependency 'log4j:log4j:1.2.17'
//
//            dependency 'javax.xml.bind:jaxb-api:2.2.8'
//            dependency 'com.sun.xml.bind:jaxb-impl:2.3.0'
//            dependency 'com.sun.xml.bind:jaxb-core:2.3.0'
//
//            dependencySet(group: 'org.codehaus.jackson', version: '1.9.13') {
//                entry 'jackson-mapper-asl'
//                entry 'jackson-core-asl'
//            }
//            dependency 'org.xerial.snappy:snappy-java:1.1.2.6'
//            dependency 'org.slf4j:slf4j-log4j12:1.7.10'
//
//            dependency 'com.sun.xml.bind:jaxb-impl:2.3.0'

            dependency 'org.apache.bcel:bcel:6.6.0'

            dependency 'com.epam.deltix:orderbook-core:1.0.16'
            dependency 'com.epam.deltix:containers:3.1.2'

            dependency 'junit:junit:4.13.1'
            dependency "org.junit.jupiter:junit-jupiter-api:$junitJupiterVersion"
            dependency "org.junit.jupiter:junit-jupiter-engine:$junitJupiterVersion"
            // End of version conflict resolution

            dependency "org.testcontainers:testcontainers:${testcontainersVersion}"
            dependency "org.testcontainers:junit-jupiter:${testcontainersVersion}"
        }
    }

    ext {
        vendor = 'EPAM Systems, Inc.'
    }
    
    archivesBaseName = project.path.replace(":java:", "").replaceAll(':', '-')

    repositories {
        mavenCentral()
    }

    jar {
        manifest {
            archiveBaseName = archivesBaseName
            description description
            attributes 'Manifest-Version': "1.0",
                    'Created-By': vendor,
                    'Implementation-Title': archivesBaseName,
                    'Implementation-Vendor': vendor,
                    'Implementation-Version': archiveVersion
        }
    }

    java {
        withJavadocJar()
        withSourcesJar()
    }

    processResources {
        from sourceSets.main.java.srcDirs
        exclude '**/*.java'
        includeEmptyDirs = false
    }

    processTestResources {
        from sourceSets.test.java.srcDirs
        exclude '**/*.java'
        includeEmptyDirs = false
    }

    afterEvaluate {
        // populate project classpath after evaluating
        jar.manifest.attributes 'Class-Path': configurations.runtimeClasspath.collect { it.getName() }.join(' ')
    }

    // Don't start resource copy if we not finished root "clean"
    classes.mustRunAfter rootProject.tasks.getByName("clean")
    // Don't start resource copy if we not finished root "clean"
    testClasses.mustRunAfter rootProject.tasks.getByName("clean")

    // Contains current project jar and all required dependencies for that project
    def allJarsPath = 'build/alljars'

    task gatherProjectDependencies(type: Sync) {
        description 'Copies all project runtime dependencies to ' + allJarsPath
        from project.configurations.runtimeClasspath
        into allJarsPath
    }

    task gatherAllJarsWithDependencies(type: Copy, dependsOn: ['jar', gatherProjectDependencies]) {
        group 'build'
        description 'Copies all project JAR and all it\'s runtime dependencies to ' + allJarsPath
        from jar // Main produced JAR of the subproject
        into allJarsPath
    }

    def allTestJarsPath = 'build/alltestjars'

    task gatherProjectTestDependencies(type: Sync) {
        description 'Copies all project test dependencies to ' + allTestJarsPath
        from project.configurations.testRuntimeClasspath
        into allTestJarsPath
    }

    task generateTestJar(type: Jar) {
        description 'Generates JAR with test classes'
        archiveClassifier = 'tests'
        from sourceSets.test.output
    }

    task gatherAllTestJarsWithDependencies(type: Copy, dependsOn: ['jar', generateTestJar, gatherProjectTestDependencies]) {
        group 'build'
        description 'Copies all project JAR and all it\'s test dependencies to ' + allTestJarsPath
        from jar // Main produced JAR of the subproject
        from generateTestJar // JAR with test classes

        into allTestJarsPath
    }

    task logJars { doLast { configurations.compile.each { File file -> println '\t' + file.name } } }
    task logJarFiles { doLast { configurations.compile.each { File file -> println '\t' + file } } }
    task logTestJarsFiles { doLast { configurations.testCompile.each { File file -> println '\t' + file } } }

    tasks.withType(Javadoc) {
        // "Xdoclint:all,-reference" - disables fail on missing JavaDoc reference. TODO: Consider removing this.
        // "-quiet" - skips warning messages (warnings still shown).
        options.addStringOption('Xdoclint:all,-reference', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }

    def rUser = findProperty('SONATYPE_NEXUS_USERNAME') ?:  System.getenv('SONATYPE_NEXUS_USERNAME') ?: "FakeUser"
    def rPass = findProperty('SONATYPE_NEXUS_PASSWORD') ?:  System.getenv('SONATYPE_NEXUS_PASSWORD') ?: "FakePass"

    // Publishing
    publishing {
        repositories {
            maven {
                url = findProperty('SONATYPE_REPOSITORY') ?: System.getenv('SONATYPE_REPOSITORY') ?: "FakeRepo"

                credentials {
                    username rUser
                    password rPass
                }
            }
        }

        publications {
            mavenJava(MavenPublication) {
                from components.java

                artifactId = archivesBaseName

                versionMapping {
                    usage(Usage.JAVA_RUNTIME) {
                        fromResolutionResult()
                    }
                    usage(Usage.JAVA_API) {
                        fromResolutionResult()
                        //fromResolutionOf("runtimeClasspath")
                    }
                }

                pom {
                    name = project.name
                    packaging = 'jar'

                    url = 'https://github.com/epam/TimebaseCryptoConnectors.git'

                    scm {
                        connection = 'scm:git:https://github.com/epam/TimebaseCryptoConnectors.git'
                        developerConnection = 'scm:git:https://github.com/epam/TimebaseCryptoConnectors.git'
                        url = 'https://github.com/epam/TimebaseCryptoConnectors.git'
                    }

                    licenses {
                        license {
                            name = 'The Apache License, Version 2.0'
                            url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }

                    developers {
                        developer {
                            id = ''
                            name = ''
                            email = ''
                            url = ''
                            organization = 'EPAM Systems'
                            organizationUrl = 'https://www.epam.com/'
                        }
                    }
                }
            }
        }

        signing {
            def signingKey = findProperty('SIGNING_PRIVATE_KEY') ?: System.getenv('SIGNING_PRIVATE_KEY') ?: "FakeUser"
            def signingPassword = findProperty('SIGNING_PASSWORD') ?: System.getenv('SIGNING_PASSWORD') ?: "FakePass"

            useInMemoryPgpKeys(signingKey, signingPassword)
            sign publishing.publications.mavenJava

            required { isReleaseVersion }
        }
    }

    afterEvaluate {
        tasks.withType(GenerateMavenPom).all {
            getPom().description.set(project.description)
        }
    }

    tasks.test { enabled = false }

    task copyJarsToLib(type: Copy, dependsOn: jar) {
        mustRunAfter clean
        mustRunAfter ':clean' // Root clean
        from configurations.runtimeClasspath
        from jar.getOutputs().files.getSingleFile()
        into "$rootDir/lib"
    }

    build.dependsOn(copyJarsToLib)

    task printDependencies(type: DependencyReportTask) {
        description "Prints project dependency tree"
    }
}

//build.dependsOn leafProjects.collect { proj -> proj.build }, project.tasks.getByName('downloadLicenses')

task cleanSubprojects {
    dependsOn leafProjects.collect { proj -> proj.tasks.getByName("clean") }
    description 'Performs clean on all leaf Java projects'
}

task cleanJava {
    dependsOn cleanSubprojects
}
build.dependsOn checkLicense
